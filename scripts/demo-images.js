import imageSearchService from '../src/services/imageSearchService.js';
import customTeamsService from '../src/services/customTeamsService.js';
import playersService from '../src/services/playersService.js';
import laLigaService from '../src/services/laLigaService.js';

/**
 * Script de demostraci√≥n para el sistema de im√°genes autom√°ticas
 * Muestra c√≥mo obtener autom√°ticamente im√°genes PNG de equipos y jugadores desde internet
 */

async function demoTeamLogos() {
  console.log('\nüèÜ === DEMO: LOGOS DE EQUIPOS AUTOM√ÅTICOS ===\n');
  
  const teams = ['Real Madrid', 'FC Barcelona', 'Atl√©tico Madrid', 'Athletic Club', 'Valencia'];
  
  console.log('Buscando logos autom√°ticamente...\n');
  
  for (const team of teams) {
    try {
      const logoUrl = await imageSearchService.getTeamLogo(team);
      console.log(`‚úÖ ${team}:`);
      console.log(`   üîó ${logoUrl}`);
      console.log(`   üìä Estado: ${logoUrl.includes('ui-avatars.com') ? 'Por defecto' : 'Encontrado autom√°ticamente'}\n`);
    } catch (error) {
      console.log(`‚ùå ${team}: ${error.message}\n`);
    }
  }
}

async function demoPlayerPhotos() {
  console.log('\nüë§ === DEMO: FOTOS DE JUGADORES AUTOM√ÅTICAS ===\n');
  
  const players = [
    { name: 'Karim Benzema', team: 'Real Madrid' },
    { name: 'Robert Lewandowski', team: 'FC Barcelona' },
    { name: 'Antoine Griezmann', team: 'Atl√©tico Madrid' },
    { name: 'I√±aki Williams', team: 'Athletic Club' },
    { name: 'Carlos Soler', team: 'Valencia' }
  ];
  
  console.log('Buscando fotos de jugadores autom√°ticamente...\n');
  
  for (const player of players) {
    try {
      const photoUrl = await playersService.getPlayerPhoto(player.name, player.team);
      console.log(`‚úÖ ${player.name} (${player.team}):`);
      console.log(`   üîó ${photoUrl}`);
      console.log(`   üìä Estado: ${photoUrl.includes('ui-avatars.com') ? 'Por defecto' : 'Encontrada autom√°ticamente'}\n`);
    } catch (error) {
      console.log(`‚ùå ${player.name}: ${error.message}\n`);
    }
  }
}

async function demoGeneratePlayersForTeam() {
  console.log('\n‚öΩ === DEMO: GENERAR JUGADORES CON FOTOS PARA UN EQUIPO ===\n');
  
  const teamName = 'Real Madrid';
  console.log(`Generando 5 jugadores para ${teamName}...\n`);
  
  try {
    const players = await playersService.generatePlayersForTeam(teamName, 5);
    
    console.log(`\n‚úÖ Jugadores generados para ${teamName}:\n`);
    players.forEach((player, index) => {
      console.log(`${index + 1}. ${player.name}`);
      console.log(`   üèÉ Posici√≥n: ${player.position}`);
      console.log(`   üë• Edad: ${player.age} a√±os`);
      console.log(`   üì∏ Foto: ${player.photo ? 'S√≠' : 'No'}`);
      console.log(`   üîó ${player.photo || 'N/A'}\n`);
    });
  } catch (error) {
    console.error(`‚ùå Error generando jugadores: ${error.message}`);
  }
}

async function demoLaLigaWithLogos() {
  console.log('\nüèÜ === DEMO: CLASIFICACI√ìN DE LA LIGA CON LOGOS AUTOM√ÅTICOS ===\n');
  
  console.log('Obteniendo clasificaci√≥n con logos autom√°ticos...\n');
  
  try {
    const standings = await laLigaService.generateStandings();
    
    console.log('ü•á TOP 5 - Clasificaci√≥n La Liga:\n');
    standings.slice(0, 5).forEach((team, index) => {
      console.log(`${index + 1}. ${team.equipo}`);
      console.log(`   üìä Puntos: ${team.puntos} | Partidos: ${team.partidos_jugados}`);
      console.log(`   üõ°Ô∏è Escudo: ${team.escudo}`);
      console.log(`   üìä Logo: ${team.escudo.includes('ui-avatars.com') ? 'Generado' : 'Autom√°tico'}\n`);
    });
  } catch (error) {
    console.error(`‚ùå Error obteniendo clasificaci√≥n: ${error.message}`);
  }
}

async function demoCacheStats() {
  console.log('\nüìä === DEMO: ESTAD√çSTICAS DE CACHE ===\n');
  
  // Estad√≠sticas del servicio de im√°genes
  const imageStats = imageSearchService.getCacheStats();
  console.log('üñºÔ∏è Cache de im√°genes:');
  console.log(`   üìÅ Total entradas: ${imageStats.totalEntries}`);
  console.log(`   üíæ Archivo cache: ${imageStats.cacheFile}`);
  
  // Estad√≠sticas del servicio de jugadores
  const playerStats = playersService.getPlayersStats();
  console.log('\nüë§ Base de datos de jugadores:');
  console.log(`   üë• Total jugadores: ${playerStats.totalPlayers}`);
  console.log(`   üì∏ Con fotos: ${playerStats.playersWithPhotos} (${playerStats.photoPercentage}%)`);
  console.log(`   üéØ Fotos personalizadas: ${playerStats.playersWithCustomPhotos} (${playerStats.customPhotoPercentage}%)`);
  console.log(`   üèüÔ∏è Equipos √∫nicos: ${playerStats.uniqueTeams}`);
  
  if (Object.keys(playerStats.positionDistribution).length > 0) {
    console.log('\nüìç Distribuci√≥n por posiciones:');
    Object.entries(playerStats.positionDistribution).forEach(([pos, count]) => {
      console.log(`   ${pos}: ${count} jugadores`);
    });
  }
}

async function demoCustomTeamsLogos() {
  console.log('\nüé® === DEMO: LOGOS DE EQUIPOS PERSONALIZADOS ===\n');
  
  console.log('Obteniendo logos de todos los equipos (reales + personalizados)...\n');
  
  try {
    const logos = await customTeamsService.getAllTeamLogosWithAuto();
    
    // Mostrar primeros 10
    const teamNames = Object.keys(logos).slice(0, 10);
    
    for (const teamName of teamNames) {
      const logoUrl = logos[teamName];
      const isCustom = customTeamsService.getCustomTeam(teamName) !== null;
      
      console.log(`${isCustom ? 'üé®' : '‚öΩ'} ${teamName}:`);
      console.log(`   üîó ${logoUrl}`);
      console.log(`   üìä Tipo: ${isCustom ? 'Equipo personalizado' : 'Equipo real'}\n`);
    }
    
    console.log(`... y ${Object.keys(logos).length - 10} equipos m√°s.`);
  } catch (error) {
    console.error(`‚ùå Error obteniendo logos: ${error.message}`);
  }
}

async function runAllDemos() {
  console.log('üöÄ INICIANDO DEMOS DEL SISTEMA DE IM√ÅGENES AUTOM√ÅTICAS');
  console.log('==================================================');
  
  try {
    await demoTeamLogos();
    await demoPlayerPhotos();
    await demoGeneratePlayersForTeam();
    await demoLaLigaWithLogos();
    await demoCustomTeamsLogos();
    await demoCacheStats();
    
    console.log('\nüéâ === DEMOS COMPLETADOS ===');
    console.log('\nüí° Caracter√≠sticas implementadas:');
    console.log('   ‚úÖ B√∫squeda autom√°tica de logos de equipos en PNG');
    console.log('   ‚úÖ B√∫squeda autom√°tica de fotos de jugadores');
    console.log('   ‚úÖ Sistema de cache para evitar b√∫squedas repetitivas');
    console.log('   ‚úÖ Integraci√≥n con servicios existentes');
    console.log('   ‚úÖ Im√°genes por defecto cuando no se encuentran');
    console.log('   ‚úÖ M√∫ltiples fuentes: ESPN, Wikipedia, generadores de avatares');
    console.log('   ‚úÖ Priorizaci√≥n de formatos PNG');
    
    console.log('\nüìù Pr√≥ximos pasos sugeridos:');
    console.log('   üîÑ Ejecutar precarga masiva con: npm run demo:preload');
    console.log('   üéÆ Integrar en componentes de frontend');
    console.log('   üìä Monitorear estad√≠sticas de cache');
    
  } catch (error) {
    console.error('\n‚ùå Error en demo:', error);
  }
}

// Funci√≥n para precargar im√°genes masivamente
async function preloadAllImages() {
  console.log('\nüîÑ === PRECARGA MASIVA DE IM√ÅGENES ===\n');
  
  // Precargar logos de equipos
  console.log('1Ô∏è‚É£ Precargando logos de equipos de La Liga...');
  await customTeamsService.preloadAllTeamLogos();
  
  // Precargar fotos de jugadores existentes
  console.log('\n2Ô∏è‚É£ Precargando fotos de jugadores...');
  await playersService.preloadMissingPhotos();
  
  console.log('\n‚úÖ Precarga completada');
}

// Ejecutar demos seg√∫n argumento
const command = process.argv[2];

switch (command) {
  case 'preload':
    await preloadAllImages();
    break;
  case 'teams':
    await demoTeamLogos();
    break;
  case 'players':
    await demoPlayerPhotos();
    break;
  case 'stats':
    await demoCacheStats();
    break;
  default:
    await runAllDemos();
}

process.exit(0);
