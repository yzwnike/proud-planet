---
import BaseLayout from "../../layouts/BaseLayout.astro";
import jugadores from "../../data/players.json";

export async function getStaticPaths() {
  const equipos = ["Nike FC", "Adidas FC", "Puma FC", "Kappa FC"];
  return equipos.map((equipo) => ({
    params: { nombre: equipo },
    props: { equipo }
  }));
}

const { nombre } = Astro.params;
const jugadoresEquipo = jugadores.filter(j => j.equipo === nombre);
---

<BaseLayout title={`${nombre} - Lineup`}>
  <div class="max-w-full mx-auto px-4">
    <!-- Header con Selector de Jornada -->
    <div class="bg-blue-600 rounded-xl shadow-lg p-6 text-white mb-6">
      <div class="flex justify-between items-center mb-4">
        <h1 class="text-3xl font-bold">‚öΩ {nombre}</h1>
        <a href="/lineups" class="bg-white/20 hover:bg-white/30 text-white px-4 py-2 rounded-lg transition-colors">
          ‚Üê Volver
        </a>
      </div>
      <!-- Selector de Jornada -->
      <div class="flex items-center justify-center space-x-4">
        <div class="flex items-center space-x-2">
          <label class="text-lg font-bold">üìÖ Jornada:</label>
          <select id="selectorJornada" class="bg-white/20 text-white border-2 border-white/30 rounded-lg px-4 py-2 text-lg font-bold focus:outline-none focus:border-white">
            <!-- Se llenar√°n las 38 jornadas -->
          </select>
        </div>
        <div class="text-lg font-bold" id="estadoJornada">
          Estado: <span class="text-green-200" id="estadoJornadaTexto">No guardada</span>
        </div>
      </div>
    </div>

    <!-- SELECTOR DE ALINEACI√ìN FUERA DEL CAMPO -->
    <div class="bg-white rounded-xl shadow-lg p-6 mb-6 border border-gray-200">
      <h2 class="text-xl font-bold text-gray-900 mb-4">üéØ Seleccionar Formaci√≥n</h2>
      <div class="flex justify-center space-x-4 flex-wrap gap-2">
        <button id="btn-442" class="formation-btn bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded-lg transition-colors font-bold" data-alineacion="4-4-2">
          4-4-2
        </button>
        <button id="btn-433" class="formation-btn bg-gray-500 hover:bg-gray-600 text-white px-6 py-3 rounded-lg transition-colors font-bold" data-alineacion="4-3-3">
          4-3-3
        </button>
        <button id="btn-343" class="formation-btn bg-gray-500 hover:bg-gray-600 text-white px-6 py-3 rounded-lg transition-colors font-bold" data-alineacion="3-4-3">
          3-4-3
        </button>
        <button id="btn-451" class="formation-btn bg-gray-500 hover:bg-gray-600 text-white px-6 py-3 rounded-lg transition-colors font-bold" data-alineacion="4-5-1">
          4-5-1
        </button>
        <button id="btn-352" class="formation-btn bg-gray-500 hover:bg-gray-600 text-white px-6 py-3 rounded-lg transition-colors font-bold" data-alineacion="3-5-2">
          3-5-2
        </button>
      </div>
      <p class="text-center text-gray-600 mt-4">Formaci√≥n actual: <span id="current-formation" class="font-bold text-blue-600">4-4-2</span></p>
    </div>

    <!-- Layout Principal: CAMPO GIGANTE A LA IZQUIERDA + JUGADORES A LA DERECHA -->
    <div class="flex flex-row gap-6 min-h-screen">
      
      <!-- CAMPO S√öPER GIGANTESCO OCUPA 75% -->
      <div class="flex-1 w-3/4">
        <div class="bg-green-500 rounded-3xl shadow-2xl p-6 min-h-screen relative" style="height: calc(100vh - 280px);">
          <!-- Header del Campo Simplificado -->
          <div class="text-center mb-4">
            <h2 class="text-white text-4xl font-bold">‚öΩ CAMPO DE JUEGO ‚öΩ</h2>
            <p class="text-green-100 text-lg mt-2">Arrastra jugadores aqu√≠ para formar tu equipo</p>
          </div>
          
          <!-- L√≠neas del campo S√öPER visibles -->
          <div class="absolute inset-8 border-6 border-white rounded-2xl bg-green-600/40">
            <!-- L√≠nea central -->
            <div class="absolute top-1/2 left-0 right-0 h-2 bg-white/90"></div>
            <!-- C√≠rculo central -->
            <div class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-32 h-32 border-4 border-white rounded-full"></div>
            
            <!-- Porter√≠a arriba (DELANTEROS) -->
            <div class="absolute -top-4 left-1/2 transform -translate-x-1/2 w-40 h-8 border-4 border-white rounded-t-2xl bg-white/30"></div>
            
            <!-- Porter√≠a abajo (PORTERO) -->
            <div class="absolute -bottom-4 left-1/2 transform -translate-x-1/2 w-40 h-8 border-4 border-white rounded-b-2xl bg-white/30"></div>
          </div>

          <!-- CONTENEDOR DE SLOTS DIN√ÅMICO -->
          <div id="slotsContainer" class="absolute inset-8">
            <!-- Los slots se generar√°n din√°micamente con JavaScript -->
          </div>
        </div>
        
        <!-- SECCI√ìN DE SUPLENTES DEBAJO DEL CAMPO -->
        <div class="bg-gray-800 rounded-xl shadow-lg p-4 mt-4">
          <h3 class="text-white text-lg font-bold mb-3 text-center">ü™ë Suplentes</h3>
          <div class="flex justify-center space-x-4" id="suplentesContainer">
            <!-- 5 slots para suplentes -->
            <div class="suplente-slot w-16 h-16 border-4 border-dashed border-gray-400 bg-gray-700/50 hover:bg-gray-600/50 rounded-full flex items-center justify-center cursor-pointer transition-all" id="suplente-1">
              <span class="text-gray-400 text-xs font-bold">S1</span>
            </div>
            <div class="suplente-slot w-16 h-16 border-4 border-dashed border-gray-400 bg-gray-700/50 hover:bg-gray-600/50 rounded-full flex items-center justify-center cursor-pointer transition-all" id="suplente-2">
              <span class="text-gray-400 text-xs font-bold">S2</span>
            </div>
            <div class="suplente-slot w-16 h-16 border-4 border-dashed border-gray-400 bg-gray-700/50 hover:bg-gray-600/50 rounded-full flex items-center justify-center cursor-pointer transition-all" id="suplente-3">
              <span class="text-gray-400 text-xs font-bold">S3</span>
            </div>
            <div class="suplente-slot w-16 h-16 border-4 border-dashed border-gray-400 bg-gray-700/50 hover:bg-gray-600/50 rounded-full flex items-center justify-center cursor-pointer transition-all" id="suplente-4">
              <span class="text-gray-400 text-xs font-bold">S4</span>
            </div>
            <div class="suplente-slot w-16 h-16 border-4 border-dashed border-gray-400 bg-gray-700/50 hover:bg-gray-600/50 rounded-full flex items-center justify-center cursor-pointer transition-all" id="suplente-5">
              <span class="text-gray-400 text-xs font-bold">S5</span>
            </div>
          </div>
        </div>
        
        <!-- BOT√ìN GUARDAR ALINEACI√ìN -->
        <div class="text-center mt-4">
          <button id="guardarAlineacion" class="bg-green-500 hover:bg-green-600 text-white font-bold py-3 px-8 rounded-lg shadow-lg transition-colors">
            üíæ Guardar Alineaci√≥n
          </button>
        </div>
      </div>

      <!-- LISTA DE JUGADORES A LA DERECHA (25%) -->
      <div class="w-1/4 min-w-[320px]">
        <div class="bg-white rounded-2xl shadow-lg border border-gray-200 sticky top-4">
          <div class="p-4 bg-gray-50 rounded-t-2xl border-b">
            <h3 class="text-xl font-bold text-gray-900">üèÉ‚Äç‚ôÇÔ∏è {nombre}</h3>
            <p class="text-sm text-gray-500">{jugadoresEquipo.length} jugadores disponibles</p>
          </div>
          
          <!-- JUGADORES SEPARADOS POR POSICIONES -->
          <div class="p-4 space-y-4 max-h-[calc(100vh-200px)] overflow-y-auto" id="listaJugadores">
            
            <!-- PORTEROS -->
            <div>
              <h4 class="text-sm font-bold text-gray-700 mb-2 uppercase tracking-wider">ü•Ö Porteros</h4>
              <div class="space-y-2">
                {jugadoresEquipo.filter(j => j.posicion === 'POR')
                  .sort((a, b) => (b.puntos || 0) - (a.puntos || 0))
                  .map(jugador => (
                  <div class="jugador-card bg-gray-50 hover:bg-blue-50 border border-gray-200 rounded-lg p-3 cursor-grab active:cursor-grabbing transition-all transform hover:-translate-y-1 hover:shadow-lg"
                       draggable="true"
                       data-jugador={JSON.stringify(jugador)}>
                    <div class="flex items-center space-x-3">
                      <img src={jugador.foto} alt={jugador.nombre} 
                           class="w-10 h-10 rounded-full object-cover border-2 border-gray-300 shadow-md"
                           onerror="this.src='https://via.placeholder.com/40/cccccc/666666?text=?'">
                      <div class="flex-1 min-w-0">
                        <div class="text-sm font-bold text-gray-900 truncate">{jugador.nombre}</div>
                        <div class="text-xs text-gray-600">{jugador.posicion} ‚Ä¢ OVR: {jugador.ovr}</div>
                        <div class="text-xs text-green-600 font-bold">‚Ç¨{jugador.valor_mercado.toLocaleString('es-ES')}</div>
                      </div>
                      <div class="text-right">
                        <div class="text-sm font-bold text-blue-600">{jugador.puntos || 0} pts</div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
            
            <!-- DEFENSAS -->
            <div>
              <h4 class="text-sm font-bold text-gray-700 mb-2 uppercase tracking-wider">üõ°Ô∏è Defensas</h4>
              <div class="space-y-2">
                {jugadoresEquipo.filter(j => j.posicion === 'DFC')
                  .sort((a, b) => (b.puntos || 0) - (a.puntos || 0))
                  .map(jugador => (
                  <div class="jugador-card bg-gray-50 hover:bg-blue-50 border border-gray-200 rounded-lg p-3 cursor-grab active:cursor-grabbing transition-all transform hover:-translate-y-1 hover:shadow-lg"
                       draggable="true"
                       data-jugador={JSON.stringify(jugador)}>
                    <div class="flex items-center space-x-3">
                      <img src={jugador.foto} alt={jugador.nombre} 
                           class="w-10 h-10 rounded-full object-cover border-2 border-gray-300 shadow-md"
                           onerror="this.src='https://via.placeholder.com/40/cccccc/666666?text=?'">
                      <div class="flex-1 min-w-0">
                        <div class="text-sm font-bold text-gray-900 truncate">{jugador.nombre}</div>
                        <div class="text-xs text-gray-600">{jugador.posicion} ‚Ä¢ OVR: {jugador.ovr}</div>
                        <div class="text-xs text-green-600 font-bold">‚Ç¨{jugador.valor_mercado.toLocaleString('es-ES')}</div>
                      </div>
                      <div class="text-right">
                        <div class="text-sm font-bold text-blue-600">{jugador.puntos || 0} pts</div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
            
            <!-- CENTROCAMPISTAS -->
            <div>
              <h4 class="text-sm font-bold text-gray-700 mb-2 uppercase tracking-wider">‚öΩ Centrocampistas</h4>
              <div class="space-y-2">
                {jugadoresEquipo.filter(j => j.posicion === 'MC')
                  .sort((a, b) => (b.puntos || 0) - (a.puntos || 0))
                  .map(jugador => (
                  <div class="jugador-card bg-gray-50 hover:bg-blue-50 border border-gray-200 rounded-lg p-3 cursor-grab active:cursor-grabbing transition-all transform hover:-translate-y-1 hover:shadow-lg"
                       draggable="true"
                       data-jugador={JSON.stringify(jugador)}>
                    <div class="flex items-center space-x-3">
                      <img src={jugador.foto} alt={jugador.nombre} 
                           class="w-10 h-10 rounded-full object-cover border-2 border-gray-300 shadow-md"
                           onerror="this.src='https://via.placeholder.com/40/cccccc/666666?text=?'">
                      <div class="flex-1 min-w-0">
                        <div class="text-sm font-bold text-gray-900 truncate">{jugador.nombre}</div>
                        <div class="text-xs text-gray-600">{jugador.posicion} ‚Ä¢ OVR: {jugador.ovr}</div>
                        <div class="text-xs text-green-600 font-bold">‚Ç¨{jugador.valor_mercado.toLocaleString('es-ES')}</div>
                      </div>
                      <div class="text-right">
                        <div class="text-sm font-bold text-blue-600">{jugador.puntos || 0} pts</div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
            
            <!-- DELANTEROS -->
            <div>
              <h4 class="text-sm font-bold text-gray-700 mb-2 uppercase tracking-wider">üöÄ Delanteros</h4>
              <div class="space-y-2">
                {jugadoresEquipo.filter(j => j.posicion === 'DC')
                  .sort((a, b) => (b.puntos || 0) - (a.puntos || 0))
                  .map(jugador => (
                  <div class="jugador-card bg-gray-50 hover:bg-blue-50 border border-gray-200 rounded-lg p-3 cursor-grab active:cursor-grabbing transition-all transform hover:-translate-y-1 hover:shadow-lg"
                       draggable="true"
                       data-jugador={JSON.stringify(jugador)}>
                    <div class="flex items-center space-x-3">
                      <img src={jugador.foto} alt={jugador.nombre} 
                           class="w-10 h-10 rounded-full object-cover border-2 border-gray-300 shadow-md"
                           onerror="this.src='https://via.placeholder.com/40/cccccc/666666?text=?'">
                      <div class="flex-1 min-w-0">
                        <div class="text-sm font-bold text-gray-900 truncate">{jugador.nombre}</div>
                        <div class="text-xs text-gray-600">{jugador.posicion} ‚Ä¢ OVR: {jugador.ovr}</div>
                        <div class="text-xs text-green-600 font-bold">‚Ç¨{jugador.valor_mercado.toLocaleString('es-ES')}</div>
                      </div>
                      <div class="text-right">
                        <div class="text-sm font-bold text-blue-600">{jugador.puntos || 0} pts</div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
            
          </div>
          
          <!-- SECCI√ìN DE JUGADORES NO DISPONIBLES -->
          <div id="jugadoresNoDisponibles" class="mt-6 border-t border-gray-300 pt-4">
            <h4 class="text-sm font-bold text-red-700 mb-3 uppercase tracking-wider">üö´ Jugadores No Disponibles</h4>
            <div class="space-y-2" id="listaNoDisponibles">
              <!-- Se llenar√° din√°micamente -->
            </div>
          </div>
          
        </div>
      </div>
    </div>
    
    <!-- SECCI√ìN DE ESTAD√çSTICAS Y PUNTOS -->
    <div id="estadisticasGuardadas" class="bg-gray-50 rounded-xl shadow-lg p-6 mt-6" style="display: none;">
      <h2 class="text-2xl font-bold text-gray-900 mb-6 text-center">üìä Estad√≠sticas del Partido</h2>
      
      <!-- Sistema completo de estad√≠sticas por jugador -->
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-6" id="estadisticasJugadores">
        <!-- Se llenar√° din√°micamente con jugadores guardados -->
      </div>
      
      <!-- Resumen total -->
      <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mt-8">
        <div class="bg-blue-500 text-white rounded-lg p-4 text-center">
          <h3 class="text-lg font-bold mb-2">üèÜ Puntos Totales</h3>
          <div class="text-2xl font-bold" id="puntosTotales">0 pts</div>
        </div>
        <div class="bg-green-500 text-white rounded-lg p-4 text-center">
          <h3 class="text-lg font-bold mb-2">‚öΩ Goles Totales</h3>
          <div class="text-2xl font-bold" id="golesTotales">0</div>
        </div>
        <div class="bg-purple-500 text-white rounded-lg p-4 text-center">
          <h3 class="text-lg font-bold mb-2">üéØ Asistencias Totales</h3>
          <div class="text-2xl font-bold" id="asistenciasTotales">0</div>
        </div>
        <div class="bg-yellow-500 text-white rounded-lg p-4 text-center">
          <h3 class="text-lg font-bold mb-2">üü® Tarjetas Totales</h3>
          <div class="text-2xl font-bold" id="tarjetasTotales">0</div>
        </div>
      </div>
      
      <!-- Bot√≥n guardar estad√≠sticas -->
      <div class="text-center mt-6">
        <button id="guardarEstadisticas" class="bg-indigo-500 hover:bg-indigo-600 text-white font-bold py-3 px-8 rounded-lg shadow-lg transition-colors">
          üíæ Guardar Estad√≠sticas
        </button>
      </div>
    </div>
  </div>

  <script define:vars={{ jugadoresEquipo, nombre }}>
    console.log(`=== INICIALIZACI√ìN ${nombre} ===`);
    console.log('Jugadores cargados:', jugadoresEquipo.length);

    // Variables globales del sistema de jornadas
    let jugadoresEnCampo = new Map();
    let suplentes = new Map(); // Para almacenar suplentes
    let alineacionActual = '4-4-2';
    let alineacionGuardadaData = null; // Para almacenar la alineaci√≥n guardada
    let jornadaActual = 1; // Jornada actual (1-38)
    let datosJornadas = {}; // Almacena datos de todas las jornadas
    let estadoJugadores = {}; // Estado de jugadores (lesiones, sanciones)

    // CONFIGURACIONES DE ALINEACIONES SIMPLES
    const alineaciones = {
      '4-4-2': { delanteros: 2, centrocampo: 4, defensa: 4, portero: 1 },
      '4-3-3': { delanteros: 3, centrocampo: 3, defensa: 4, portero: 1 },
      '3-4-3': { delanteros: 3, centrocampo: 4, defensa: 3, portero: 1 },
      '4-5-1': { delanteros: 1, centrocampo: 5, defensa: 4, portero: 1 },
      '3-5-2': { delanteros: 2, centrocampo: 5, defensa: 3, portero: 1 }
    };

    // Generar alineaci√≥n con 4 l√≠neas horizontales y grids adaptativos
    function generarAlineacion(formacion) {
      const container = document.getElementById('slotsContainer');
      container.innerHTML = '';
      
      const config = alineaciones[formacion];
      console.log(`üîß Generando ${formacion}:`, config);
      
      // Crear las 4 l√≠neas (DE ARRIBA A ABAJO: DC, MC, DFC, POR) - DISTRIBU√çDAS EN TODO EL CAMPO
      const lineas = [
        { nombre: 'delanteros', letra: 'DC', cantidad: config.delanteros, color: 'red', posicion: '15%' },
        { nombre: 'centrocampo', letra: 'MC', cantidad: config.centrocampo, color: 'green', posicion: '40%' },
        { nombre: 'defensa', letra: 'DFC', cantidad: config.defensa, color: 'blue', posicion: '65%' },
        { nombre: 'portero', letra: 'POR', cantidad: config.portero, color: 'yellow', posicion: '85%' }
      ];
      
      lineas.forEach((linea, lineaIndex) => {
        if (linea.cantidad > 0) {
          console.log(`üìç Creando l√≠nea ${linea.nombre}: ${linea.cantidad} jugadores`);
          
          // Crear contenedor de l√≠nea con CSS GRID GIGANTESCO
          const lineaDiv = document.createElement('div');
          lineaDiv.className = 'absolute left-0 right-0 flex items-center justify-center px-4';
          lineaDiv.style.top = linea.posicion;
          lineaDiv.style.transform = 'translateY(-50%)';
          lineaDiv.style.height = '120px'; // Altura fija generosa para los slots
          
          // Crear grid interno que se adapta al n√∫mero de jugadores
          const gridDiv = document.createElement('div');
          gridDiv.className = 'grid place-items-center w-full';
          gridDiv.style.gridTemplateColumns = `repeat(${linea.cantidad}, 1fr)`;
          
          // GAP din√°mico: menos jugadores = m√°s espacio entre ellos
          const gapMap = {
            1: '0px',     // 1 jugador: sin gap (centrado)
            2: '180px',   // 2 jugadores: gap enorme 
            3: '120px',   // 3 jugadores: gap grande
            4: '90px',    // 4 jugadores: gap mediano
            5: '60px'     // 5 jugadores: gap normal
          };
          gridDiv.style.gap = gapMap[linea.cantidad] || '30px';
          
          // Crear slots para esta l√≠nea
          for (let i = 0; i < linea.cantidad; i++) {
            const slot = document.createElement('div');
            const slotId = `slot-${linea.letra}${linea.letra === 'POR' ? '' : '-' + (i + 1)}`;
            slot.id = slotId;
            
            // TAMA√ëO UNIFORME PARA TODOS LOS SLOTS
            let size, fontSize;
            if (linea.letra === 'POR') {
              // Portero mismo tama√±o que los dem√°s
              size = 'w-18 h-18'; // 72px x 72px - TAMA√ëO MEDIO UNIFORME
              fontSize = 'text-base';
            } else {
              // Todos los jugadores de campo tienen el mismo tama√±o
              size = 'w-18 h-18'; // 72px x 72px - TAMA√ëO MEDIO UNIFORME
              fontSize = 'text-base';
            }
            
            console.log(`  üéØ Slot ${slotId}: tama√±o ${size}, cantidad en l√≠nea: ${linea.cantidad}`);
            
            // Colores por posici√≥n con mejor contraste
            let colorClass;
            if (linea.letra === 'POR') {
              colorClass = 'border-yellow-400 bg-yellow-500/50 hover:bg-yellow-400/70 text-yellow-900';
            } else {
              const colors = {
                'red': 'border-red-400 bg-red-500/50 hover:bg-red-400/70 text-red-100',
                'green': 'border-green-400 bg-green-500/50 hover:bg-green-400/70 text-green-100',
                'blue': 'border-blue-400 bg-blue-500/50 hover:bg-blue-400/70 text-blue-100'
              };
              colorClass = colors[linea.color];
            }
            
            slot.className = `${size} border-4 border-dashed ${colorClass} rounded-full flex items-center justify-center cursor-pointer transition-all duration-300 shadow-2xl hover:shadow-3xl hover:scale-110 backdrop-blur-sm`;
            slot.innerHTML = `<span class="${fontSize} font-bold drop-shadow-2xl">${linea.letra}</span>`;
            
            // Configurar drag & drop
            configurarSlotDragDrop(slot);
            
            gridDiv.appendChild(slot);
          }
          
          lineaDiv.appendChild(gridDiv);
          container.appendChild(lineaDiv);
        }
      });
      
      console.log(`‚úÖ Alineaci√≥n ${formacion} generada con grids adaptativos`);
    }
    
    // Configurar eventos drag & drop para un slot
    function configurarSlotDragDrop(slot) {
      slot.addEventListener('dragover', (e) => {
        e.preventDefault();
        slot.classList.add('ring-4', 'ring-blue-400', 'scale-110');
      });

      slot.addEventListener('dragleave', (e) => {
        slot.classList.remove('ring-4', 'ring-blue-400', 'scale-110');
      });

      slot.addEventListener('drop', (e) => {
        e.preventDefault();
        slot.classList.remove('ring-4', 'ring-blue-400', 'scale-110');
        
        const jugadorData = JSON.parse(e.dataTransfer.getData('text/plain'));
        console.log('Jugador dropeado:', jugadorData.nombre, 'en slot:', slot.id);
        
        // CUALQUIER JUGADOR PUEDE JUGAR EN CUALQUIER POSICI√ìN
        const slotPosicion = slot.id.split('-')[1];
        console.log(`‚úÖ ${jugadorData.nombre} (${jugadorData.posicion}) puede jugar en posici√≥n ${slotPosicion}`);

        // Colocar jugador en el slot
        colocarJugadorEnSlot(jugadorData, slot);
      });

      slot.addEventListener('click', () => {
        quitarJugadorDelSlot(slot.id);
      });
    }

    // Colocar jugador en slot con tama√±os adaptativos din√°micos
    function colocarJugadorEnSlot(jugador, slot) {
      slot.innerHTML = '';
      
      // Obtener el tama√±o actual del slot para adaptarnos a √©l
      const slotClasses = slot.className;
      
      // TAMA√ëO UNIFORME PARA TODOS LOS JUGADORES COLOCADOS
      let slotSize, imgSize, textSize, nombreBottom;
      
      // Todos los jugadores (incluido el portero) tienen el mismo tama√±o uniforme
      slotSize = 'w-18 h-18';  // 72px x 72px - TAMA√ëO MEDIO UNIFORME
      imgSize = 'w-14 h-14';   // 56px x 56px - Imagen proporcional
      textSize = 'text-xs';
      nombreBottom = '-bottom-6';
      
      if (slot.id.includes('POR')) {
        // PORTERO - Mismo tama√±o, color amarillo
        slot.className = `${slotSize} border-4 border-solid border-yellow-400 rounded-full bg-gradient-to-br from-yellow-400 to-yellow-600 flex items-center justify-center cursor-pointer transition-all relative shadow-2xl hover:shadow-3xl hover:scale-105`;
      } else {
        // JUGADORES DE CAMPO - Mismo tama√±o, colores por posici√≥n
        
        // Color seg√∫n posici√≥n
        let bgColor;
        if (slot.id.includes('DC')) {
          bgColor = 'bg-gradient-to-br from-red-500 to-red-700';
        } else if (slot.id.includes('MC')) {
          bgColor = 'bg-gradient-to-br from-green-500 to-green-700';
        } else if (slot.id.includes('DFC')) {
          bgColor = 'bg-gradient-to-br from-blue-500 to-blue-700';
        } else {
          bgColor = 'bg-gradient-to-br from-gray-500 to-gray-700';
        }
        
        slot.className = `${slotSize} border-4 border-solid border-white rounded-full ${bgColor} flex items-center justify-center cursor-pointer transition-all relative shadow-2xl hover:shadow-3xl hover:scale-105`;
      }
      
      console.log(`üéØ Colocando ${jugador.nombre} con tama√±o: ${slotSize}`);
      
      // Crear imagen con tama√±o adaptativo
      const img = document.createElement('img');
      img.src = jugador.foto;
      img.alt = jugador.nombre;
      img.className = `${imgSize} rounded-full object-cover border-4 border-white shadow-2xl`;
      img.onerror = function() { 
        const size = imgSize.includes('w-20') ? '80' : 
                     imgSize.includes('w-16') ? '64' : 
                     imgSize.includes('w-14') ? '56' : 
                     imgSize.includes('w-12') ? '48' : 
                     imgSize.includes('w-10') ? '40' : '48';
        this.src = `https://via.placeholder.com/${size}/ffffff/333333?text=${jugador.nombre.charAt(0)}`; 
      };
      
      // Crear nombre con tama√±o adaptativo
      const nombre = document.createElement('div');
      nombre.className = `absolute ${nombreBottom} left-1/2 transform -translate-x-1/2 text-white ${textSize} font-bold bg-black/90 px-3 py-1 rounded-lg whitespace-nowrap shadow-xl backdrop-blur-sm`;
      nombre.textContent = jugador.nombre.split(' ')[0];
      
      // Crear stats overlay para jugadores grandes
      if (slotSize.includes('w-48') || slotSize.includes('w-56') || slotSize.includes('w-64') || slotSize.includes('w-72')) {
        const stats = document.createElement('div');
        const statsSize = slotSize.includes('w-72') || slotSize.includes('w-64') ? 'text-sm' : 'text-xs';
        stats.className = `absolute top-2 right-2 bg-white/90 text-black ${statsSize} font-bold px-2 py-1 rounded-full shadow-lg`;
        stats.textContent = `OVR ${jugador.ovr}`;
        slot.appendChild(stats);
      }
      
      slot.appendChild(img);
      slot.appendChild(nombre);
      
      // Guardar en mapa
      jugadoresEnCampo.set(slot.id, jugador);
      
      // Ocultar de lista
      const card = document.querySelector(`[data-jugador*='${jugador.nombre}']`);
      if (card) card.style.display = 'none';

      console.log(`‚úÖ ${jugador.nombre} colocado en ${slot.id} con tama√±o ${slotSize}`);
    }

    // Quitar jugador del slot
    function quitarJugadorDelSlot(slotId) {
      const jugador = jugadoresEnCampo.get(slotId);
      if (!jugador) return;

      jugadoresEnCampo.delete(slotId);
      
      // Mostrar en lista
      const card = document.querySelector(`[data-jugador*='${jugador.nombre}']`);
      if (card) card.style.display = 'block';

      // Regenerar alineaci√≥n para restaurar slot y mantener otros jugadores
      regenerarAlineacionConJugadores();

      console.log(`‚ùå ${jugador.nombre} quitado de ${slotId}`);
    }

    // Regenerar alineaci√≥n manteniendo jugadores existentes
    function regenerarAlineacionConJugadores() {
      // Guardar jugadores actuales
      const jugadoresActuales = new Map(jugadoresEnCampo);
      
      // Limpiar mapa actual
      jugadoresEnCampo.clear();
      
      // Regenerar alineaci√≥n
      generarAlineacion(alineacionActual);
      
      // Recolocar jugadores compatibles
      jugadoresActuales.forEach((jugador, slotId) => {
        const nuevoSlot = document.getElementById(slotId);
        if (nuevoSlot && nuevoSlot.innerHTML.includes('span')) {
          // El slot existe y est√° vac√≠o, recolocar jugador
          colocarJugadorEnSlot(jugador, nuevoSlot);
        } else {
          // Si el slot ya no existe, mostrar jugador en lista
          const card = document.querySelector(`[data-jugador*='${jugador.nombre}']`);
          if (card) {
            card.style.display = 'block';
            console.log(`üîÑ Devolviendo ${jugador.nombre} a la lista (slot ${slotId} no disponible)`);
          }
        }
      });
    }

    // ===== SISTEMA DE JORNADAS =====
    
    // Inicializar selector de jornadas
    function inicializarSelectorJornadas() {
      const selector = document.getElementById('selectorJornada');
      
      // Llenar con las 38 jornadas
      for (let i = 1; i <= 38; i++) {
        const option = document.createElement('option');
        option.value = i;
        option.textContent = `Jornada ${i}`;
        if (i === jornadaActual) option.selected = true;
        selector.appendChild(option);
      }
      
      // Evento para cambiar jornada
      selector.addEventListener('change', (e) => {
        cambiarJornada(parseInt(e.target.value));
      });
    }
    
    // Cambiar a una jornada espec√≠fica
    function cambiarJornada(nuevaJornada) {
      console.log(`üìÖ Cambiando a jornada ${nuevaJornada}`);
      
      // Guardar estado actual si hay cambios
      if (jugadoresEnCampo.size > 0 || suplentes.size > 0) {
        guardarEstadoJornadaActual();
      }
      
      jornadaActual = nuevaJornada;
      
      // Limpiar campo actual
      limpiarCampoCompleto();
      
      // Cargar datos de la nueva jornada
      cargarDatosJornada(nuevaJornada);
      
      // Actualizar estado visual
      actualizarEstadoJornadaVisual();
      
      // Actualizar disponibilidad de jugadores
      actualizarDisponibilidadJugadores();
    }
    
    // Guardar estado de jornada actual
    function guardarEstadoJornadaActual() {
      if (!datosJornadas[jornadaActual]) {
        datosJornadas[jornadaActual] = {};
      }
      
      datosJornadas[jornadaActual] = {
        ...datosJornadas[jornadaActual],
        formacion: alineacionActual,
        jugadoresCampo: Array.from(jugadoresEnCampo.entries()),
        suplentes: Array.from(suplentes.entries()),
        fechaModificacion: new Date().toISOString()
      };
      
      // Guardar en localStorage
      localStorage.setItem(`jornadas_${nombre}`, JSON.stringify(datosJornadas));
    }
    
    // Cargar datos de una jornada espec√≠fica
    function cargarDatosJornada(jornada) {
      // Cargar desde localStorage
      const datosGuardados = localStorage.getItem(`jornadas_${nombre}`);
      if (datosGuardados) {
        datosJornadas = JSON.parse(datosGuardados);
      }
      
      const datosJornada = datosJornadas[jornada];
      if (datosJornada) {
        // Restaurar formaci√≥n
        if (datosJornada.formacion) {
          alineacionActual = datosJornada.formacion;
          document.getElementById('current-formation').textContent = alineacionActual;
          
          // Actualizar botones de formaci√≥n
          document.querySelectorAll('.formation-btn').forEach(btn => {
            btn.className = 'formation-btn bg-gray-500 hover:bg-gray-600 text-white px-6 py-3 rounded-lg transition-colors font-bold';
          });
          const botonActivo = document.querySelector(`[data-alineacion="${alineacionActual}"]`);
          if (botonActivo) {
            botonActivo.className = 'formation-btn bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded-lg transition-colors font-bold';
          }
        }
        
        // Generar alineaci√≥n limpia
        generarAlineacion(alineacionActual);
        
        // LIMPIAR SUPLENTES ANTES DE RESTAURAR
        restaurarSuplentersLimpios();
        
        // Restaurar jugadores en campo
        if (datosJornada.jugadoresCampo) {
          datosJornada.jugadoresCampo.forEach(([slotId, jugador]) => {
            const slot = document.getElementById(slotId);
            if (slot) {
              colocarJugadorEnSlot(jugador, slot);
            }
          });
        }
        
        // Restaurar suplentes de ESTA jornada espec√≠fica
        if (datosJornada.suplentes) {
          datosJornada.suplentes.forEach(([slotId, jugador]) => {
            const slot = document.getElementById(slotId);
            if (slot) {
              colocarJugadorEnSuplentes(jugador, slot);
            }
          });
        }
      } else {
        // Jornada nueva, generar alineaci√≥n por defecto y limpiar suplentes
        generarAlineacion(alineacionActual);
        restaurarSuplentersLimpios();
      }
    }
    
    // Funci√≥n para restaurar slots de suplentes limpios
    function restaurarSuplentersLimpios() {
      console.log('üßπ Limpiando slots de suplentes...');
      
      // Limpiar el mapa de suplentes
      suplentes.clear();
      
      // Restaurar slots de suplentes a estado vac√≠o
      for (let i = 1; i <= 5; i++) {
        const slot = document.getElementById(`suplente-${i}`);
        if (slot) {
          slot.className = 'suplente-slot w-16 h-16 border-4 border-dashed border-gray-400 bg-gray-700/50 hover:bg-gray-600/50 rounded-full flex items-center justify-center cursor-pointer transition-all';
          slot.innerHTML = `<span class="text-gray-400 text-xs font-bold">S${i}</span>`;
        }
      }
      
      console.log('‚úÖ Slots de suplentes limpiados');
    }
    
    // Limpiar campo completamente
    function limpiarCampoCompleto() {
      jugadoresEnCampo.clear();
      suplentes.clear();
      
      // Mostrar todos los jugadores en la lista
      document.querySelectorAll('.jugador-card').forEach(card => {
        card.style.display = 'block';
      });
      
      // Ocultar secci√≥n de estad√≠sticas
      document.getElementById('estadisticasGuardadas').style.display = 'none';
      alineacionGuardadaData = null;
    }
    
    // Actualizar estado visual de la jornada
    function actualizarEstadoJornadaVisual() {
      const estadoTexto = document.getElementById('estadoJornadaTexto');
      const jornadaGuardada = datosJornadas[jornadaActual] && datosJornadas[jornadaActual].estadisticasGuardadas;
      
      if (jornadaGuardada) {
        estadoTexto.textContent = 'Completada';
        estadoTexto.className = 'text-green-300';
      } else {
        estadoTexto.textContent = 'No guardada';
        estadoTexto.className = 'text-yellow-300';
      }
    }
    
    // ===== GESTI√ìN DE ESTADO DE JUGADORES =====
    
    // Inicializar estado de jugadores
    function inicializarEstadoJugadores() {
      const estadoGuardado = localStorage.getItem(`estado_jugadores_${nombre}`);
      if (estadoGuardado) {
        estadoJugadores = JSON.parse(estadoGuardado);
      }
      
      // Inicializar jugadores que no est√©n en el estado
      jugadoresEquipo.forEach(jugador => {
        if (!estadoJugadores[jugador.nombre]) {
          estadoJugadores[jugador.nombre] = {
            lesionJornadasRestantes: 0,
            suspendidoJornadasRestantes: 0,
            tarjetasAmarillasAcumuladas: 0,
            historialLesiones: [],
            historialSanciones: []
          };
        }
      });
      
      // Reducir jornadas de lesiones y sanciones para la jornada actual
      actualizarEstadosJornada();
    }
    
    // Actualizar estados de jugadores para la jornada actual
    function actualizarEstadosJornada() {
      Object.keys(estadoJugadores).forEach(nombreJugador => {
        const estado = estadoJugadores[nombreJugador];
        
        // Reducir lesiones (solo si es mayor que 0)
        if (estado.lesionJornadasRestantes > 0) {
          estado.lesionJornadasRestantes = Math.max(0, estado.lesionJornadasRestantes - 1);
        }
        
        // Reducir suspensiones (solo si es mayor que 0)
        if (estado.suspendidoJornadasRestantes > 0) {
          estado.suspendidoJornadasRestantes = Math.max(0, estado.suspendidoJornadasRestantes - 1);
        }
      });
      
      // Guardar estado actualizado
      localStorage.setItem(`estado_jugadores_${nombre}`, JSON.stringify(estadoJugadores));
    }
    
    // Verificar si un jugador est√° disponible para jugar
    function jugadorDisponible(nombreJugador) {
      const estado = estadoJugadores[nombreJugador];
      if (!estado) return true;
      
      return estado.lesionJornadasRestantes === 0 && estado.suspendidoJornadasRestantes === 0;
    }
    
    // Actualizar disponibilidad visual de jugadores
    function actualizarDisponibilidadJugadores() {
      document.querySelectorAll('.jugador-card').forEach(card => {
        const jugadorData = JSON.parse(card.getAttribute('data-jugador'));
        const disponible = jugadorDisponible(jugadorData.nombre);
        
        if (!disponible) {
          const estado = estadoJugadores[jugadorData.nombre];
          card.classList.add('opacity-50', 'cursor-not-allowed');
          card.setAttribute('draggable', 'false');
          
          // Agregar indicador visual
          let indicador = card.querySelector('.indicador-estado');
          if (!indicador) {
            indicador = document.createElement('div');
            indicador.className = 'indicador-estado absolute top-1 right-1 text-xs font-bold px-2 py-1 rounded-full';
            card.style.position = 'relative';
            card.appendChild(indicador);
          }
          
          if (estado.lesionJornadasRestantes > 0) {
            indicador.textContent = `ü©π ${estado.lesionJornadasRestantes}J`;
            indicador.className = 'indicador-estado absolute top-1 right-1 text-xs font-bold px-2 py-1 rounded-full bg-red-500 text-white';
          } else if (estado.suspendidoJornadasRestantes > 0) {
            indicador.textContent = `üü• ${estado.suspendidoJornadasRestantes}J`;
            indicador.className = 'indicador-estado absolute top-1 right-1 text-xs font-bold px-2 py-1 rounded-full bg-orange-500 text-white';
          }
        } else {
          card.classList.remove('opacity-50', 'cursor-not-allowed');
          card.setAttribute('draggable', 'true');
          
          // Remover indicador
          const indicador = card.querySelector('.indicador-estado');
          if (indicador) indicador.remove();
        }
      });
      
      // Actualizar secci√≥n de jugadores no disponibles
      actualizarSeccionJugadoresNoDisponibles();
    }
    
    // Aplicar lesi√≥n a un jugador
    function aplicarLesion(nombreJugador, jornadas) {
      if (!estadoJugadores[nombreJugador]) return;
      
      estadoJugadores[nombreJugador].lesionJornadasRestantes = Math.max(
        estadoJugadores[nombreJugador].lesionJornadasRestantes,
        jornadas
      );
      
      estadoJugadores[nombreJugador].historialLesiones.push({
        jornada: jornadaActual,
        duracion: jornadas,
        fecha: new Date().toISOString()
      });
      
      localStorage.setItem(`estado_jugadores_${nombre}`, JSON.stringify(estadoJugadores));
      actualizarDisponibilidadJugadores();
      
      console.log(`ü©π ${nombreJugador} lesionado por ${jornadas} jornadas`);
    }
    
    // Aplicar sanci√≥n a un jugador
    function aplicarSancion(nombreJugador, tipo) {
      if (!estadoJugadores[nombreJugador]) return;
      
      const estado = estadoJugadores[nombreJugador];
      
      if (tipo === 'tarjeta_roja') {
        estado.suspendidoJornadasRestantes = Math.max(estado.suspendidoJornadasRestantes, 1);
        estado.historialSanciones.push({
          jornada: jornadaActual,
          tipo: 'roja',
          duracion: 1,
          fecha: new Date().toISOString()
        });
        console.log(`üü• ${nombreJugador} suspendido 1 jornada por tarjeta roja`);
      } else if (tipo === 'quinta_amarilla') {
        estado.tarjetasAmarillasAcumuladas = 0; // Reset despu√©s de la quinta
        estado.suspendidoJornadasRestantes = Math.max(estado.suspendidoJornadasRestantes, 1);
        estado.historialSanciones.push({
          jornada: jornadaActual,
          tipo: 'quinta_amarilla',
          duracion: 1,
          fecha: new Date().toISOString()
        });
        console.log(`üü®üü®üü®üü®üü® ${nombreJugador} suspendido 1 jornada por 5 amarillas`);
      }
      
      localStorage.setItem(`estado_jugadores_${nombre}`, JSON.stringify(estadoJugadores));
      actualizarDisponibilidadJugadores();
    }
    
    // Inicializaci√≥n
    document.addEventListener('DOMContentLoaded', function() {
      console.log('DOM cargado, configurando sistema...');
      
      // Inicializar sistema de jornadas
      inicializarSelectorJornadas();
      inicializarEstadoJugadores();
      
      // Cargar datos de jornada actual
      cargarDatosJornada(jornadaActual);
      actualizarEstadoJornadaVisual();
      actualizarDisponibilidadJugadores();
      
      // Hacer draggables las cartas de jugadores
      const jugadorCards = document.querySelectorAll('.jugador-card');
      jugadorCards.forEach(card => {
        card.addEventListener('dragstart', (e) => {
          const jugadorData = JSON.parse(card.getAttribute('data-jugador'));
          
          // Verificar si el jugador est√° disponible
          if (!jugadorDisponible(jugadorData.nombre)) {
            e.preventDefault();
            alert(`‚ùå ${jugadorData.nombre} no est√° disponible para jugar en esta jornada`);
            return;
          }
          
          e.dataTransfer.setData('text/plain', card.getAttribute('data-jugador'));
          card.classList.add('opacity-50');
        });

        card.addEventListener('dragend', (e) => {
          card.classList.remove('opacity-50');
        });
      });

      // Configurar botones de alineaci√≥n con m√©todo CORREGIDO
      const botonesFormacion = document.querySelectorAll('.formation-btn');
      console.log('Botones encontrados:', botonesFormacion.length);
      
      // Funci√≥n para cambiar formaci√≥n
      function cambiarFormacion(nuevaFormacion, botonId) {
        console.log(`üîÑ Cambiando a formaci√≥n: ${nuevaFormacion}`);
        
        if (nuevaFormacion === alineacionActual) {
          console.log(`‚ö†Ô∏è Ya est√°s en formaci√≥n ${nuevaFormacion}`);
          return;
        }
        
        // Limpiar campo
        jugadoresEnCampo.clear();
        document.querySelectorAll('.jugador-card').forEach(card => {
          card.style.display = 'block';
        });
        
        // Configurar nueva formaci√≥n
        alineacionActual = nuevaFormacion;
        generarAlineacion(nuevaFormacion);
        
        // Actualizar indicador de formaci√≥n actual
        document.getElementById('current-formation').textContent = nuevaFormacion;
        
        // Actualizar botones
        document.querySelectorAll('.formation-btn').forEach(btn => {
          btn.className = 'formation-btn bg-gray-500 hover:bg-gray-600 text-white px-6 py-3 rounded-lg transition-colors font-bold';
        });
        document.getElementById(botonId).className = 'formation-btn bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded-lg transition-colors font-bold';
        
        console.log(`‚úÖ Cambio a ${nuevaFormacion} completado`);
      }
      
      // Configurar eventos de botones
      document.getElementById('btn-442').addEventListener('click', () => cambiarFormacion('4-4-2', 'btn-442'));
      document.getElementById('btn-433').addEventListener('click', () => cambiarFormacion('4-3-3', 'btn-433'));
      document.getElementById('btn-343').addEventListener('click', () => cambiarFormacion('3-4-3', 'btn-343'));
      document.getElementById('btn-451').addEventListener('click', () => cambiarFormacion('4-5-1', 'btn-451'));
      document.getElementById('btn-352').addEventListener('click', () => cambiarFormacion('3-5-2', 'btn-352'));
      
      // Configurar suplentes drag & drop
      configurarSuplentesDragDrop();
      
      // Configurar bot√≥n de guardar alineaci√≥n
      document.getElementById('guardarAlineacion').addEventListener('click', guardarAlineacion);
    });
    
    // Configurar drag & drop para slots de suplentes
    function configurarSuplentesDragDrop() {
      const suplenteSlots = document.querySelectorAll('.suplente-slot');
      
      suplenteSlots.forEach(slot => {
        slot.addEventListener('dragover', (e) => {
          e.preventDefault();
          slot.classList.add('ring-4', 'ring-green-400', 'scale-110');
        });

        slot.addEventListener('dragleave', (e) => {
          slot.classList.remove('ring-4', 'ring-green-400', 'scale-110');
        });

        slot.addEventListener('drop', (e) => {
          e.preventDefault();
          slot.classList.remove('ring-4', 'ring-green-400', 'scale-110');
          
          const jugadorData = JSON.parse(e.dataTransfer.getData('text/plain'));
          console.log('Suplente dropeado:', jugadorData.nombre, 'en slot:', slot.id);
          
          // Colocar jugador en suplentes
          colocarJugadorEnSuplentes(jugadorData, slot);
        });

        slot.addEventListener('click', () => {
          quitarSuplenteDelSlot(slot.id);
        });
      });
    }
    
    // Colocar jugador en slot de suplente
    function colocarJugadorEnSuplentes(jugador, slot) {
      slot.innerHTML = '';
      
      // Aplicar estilo de suplente activo
      slot.className = 'suplente-slot w-16 h-16 border-4 border-solid border-green-400 bg-gradient-to-br from-green-500 to-green-700 rounded-full flex items-center justify-center cursor-pointer transition-all relative shadow-xl hover:shadow-2xl hover:scale-105';
      
      // Crear imagen del jugador
      const img = document.createElement('img');
      img.src = jugador.foto;
      img.alt = jugador.nombre;
      img.className = 'w-12 h-12 rounded-full object-cover border-2 border-white shadow-lg';
      img.onerror = function() { 
        this.src = `https://via.placeholder.com/48/ffffff/333333?text=${jugador.nombre.charAt(0)}`; 
      };
      
      // Crear nombre abajo del slot
      const nombre = document.createElement('div');
      nombre.className = 'absolute -bottom-6 left-1/2 transform -translate-x-1/2 text-white text-xs font-bold bg-black/90 px-2 py-1 rounded whitespace-nowrap shadow-lg';
      nombre.textContent = jugador.nombre.split(' ')[0];
      
      slot.appendChild(img);
      slot.appendChild(nombre);
      
      // Guardar en mapa de suplentes
      suplentes.set(slot.id, jugador);
      
      // Ocultar de lista
      const card = document.querySelector(`[data-jugador*='${jugador.nombre}']`);
      if (card) card.style.display = 'none';

      console.log(`‚úÖ ${jugador.nombre} colocado como suplente en ${slot.id}`);
    }
    
    // Quitar suplente del slot
    function quitarSuplenteDelSlot(slotId) {
      const jugador = suplentes.get(slotId);
      if (!jugador) return;

      suplentes.delete(slotId);
      
      // Restaurar slot vac√≠o
      const slot = document.getElementById(slotId);
      const slotNumber = slotId.split('-')[1];
      slot.className = 'suplente-slot w-16 h-16 border-4 border-dashed border-gray-400 bg-gray-700/50 hover:bg-gray-600/50 rounded-full flex items-center justify-center cursor-pointer transition-all';
      slot.innerHTML = `<span class="text-gray-400 text-xs font-bold">S${slotNumber}</span>`;
      
      // Mostrar en lista
      const card = document.querySelector(`[data-jugador*='${jugador.nombre}']`);
      if (card) card.style.display = 'block';

      console.log(`‚ùå Suplente ${jugador.nombre} quitado de ${slotId}`);
    }
    
    // Funci√≥n para guardar alineaci√≥n
    function guardarAlineacion() {
      if (jugadoresEnCampo.size === 0) {
        alert('‚ùå Debes colocar al menos un jugador en el campo antes de guardar.');
        return;
      }
      
      // Crear datos de la alineaci√≥n guardada
      alineacionGuardadaData = {
        formacion: alineacionActual,
        jugadoresCampo: Array.from(jugadoresEnCampo.entries()),
        suplentes: Array.from(suplentes.entries()),
        fechaGuardado: new Date().toLocaleString('es-ES')
      };
      
      console.log('Alineaci√≥n guardada:', alineacionGuardadaData);
      
      // Mostrar secci√≥n de alineaci√≥n guardada
      mostrarAlineacionGuardada();
      
      // Feedback visual
      const boton = document.getElementById('guardarAlineacion');
      const textoOriginal = boton.textContent;
      boton.textContent = '‚úÖ ¬°Guardado!';
      boton.className = 'bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-8 rounded-lg shadow-lg transition-colors';
      
      setTimeout(() => {
        boton.textContent = textoOriginal;
        boton.className = 'bg-green-500 hover:bg-green-600 text-white font-bold py-3 px-8 rounded-lg shadow-lg transition-colors';
      }, 2000);
      
      alert(`‚úÖ Alineaci√≥n guardada exitosamente\n\nüìä Formaci√≥n: ${alineacionActual}\nüë• Jugadores en campo: ${jugadoresEnCampo.size}\nü™ë Suplentes: ${suplentes.size}\nüïí Fecha: ${alineacionGuardadaData.fechaGuardado}`);
    }
    
    // Mostrar secci√≥n de estad√≠sticas
    function mostrarAlineacionGuardada() {
      const seccion = document.getElementById('estadisticasGuardadas');
      seccion.style.display = 'block';
      
      // Mostrar sistema completo de estad√≠sticas
      mostrarSistemaEstadisticas();
      
      // Configurar bot√≥n de guardar estad√≠sticas
      document.getElementById('guardarEstadisticas').addEventListener('click', guardarEstadisticasCompletas);
      
      // Scroll suave hacia la secci√≥n
      seccion.scrollIntoView({ behavior: 'smooth' });
    }
    
    // Mostrar sistema completo de estad√≠sticas
    function mostrarSistemaEstadisticas() {
      const container = document.getElementById('estadisticasJugadores');
      container.innerHTML = '';
      
      if (!alineacionGuardadaData) return;
      
      // Crear tarjetas de estad√≠sticas para cada jugador (titulares y suplentes)
      const todosLosJugadores = [
        ...alineacionGuardadaData.jugadoresCampo,
        ...Array.from(suplentes.entries())
      ];
      
      todosLosJugadores.forEach(([slotId, jugador]) => {
        const jugadorDiv = document.createElement('div');
        const esSuplente = slotId.startsWith('suplente');
        jugadorDiv.className = `bg-white rounded-lg p-4 shadow-md border ${esSuplente ? 'border-orange-300 bg-orange-50' : ''}`;
        
        // Inicializar estad√≠sticas del jugador si no existen
        const estadisticas = {
          puntos: jugador.puntos || 0,
          goles: jugador.goles || 0,
          asistencias: jugador.asistencias || 0,
          tarjetasAmarillas: jugador.tarjetasAmarillas || 0,
          tarjetasRojas: jugador.tarjetasRojas || 0,
          lesion: jugador.lesion || false
        };
        
        jugadorDiv.innerHTML = `
          <div class="flex items-center space-x-3 mb-4">
            <img src="${jugador.foto}" alt="${jugador.nombre}" 
                 class="w-12 h-12 rounded-full object-cover border-2 border-gray-300"
                 onerror="this.src='https://via.placeholder.com/48/cccccc/666666?text=${jugador.nombre.charAt(0)}'">
            <div class="flex-1">
              <div class="font-bold text-lg">${jugador.nombre} ${esSuplente ? 'ü™ë' : ''}</div>
              <div class="text-sm text-gray-600">${jugador.posicion} ‚Ä¢ OVR: ${jugador.ovr} ${esSuplente ? '(Suplente)' : '(Titular)'}</div>
            </div>
            <div class="text-right">
              <div class="text-lg font-bold text-blue-600" id="puntos-${slotId}">${estadisticas.puntos} pts</div>
            </div>
          </div>
          
          <div class="grid grid-cols-2 gap-3">
            <!-- Puntos -->
            <div class="flex flex-col">
              <label class="text-xs font-bold text-gray-700 mb-1">üèÜ Puntos (0-30)</label>
              <input type="number" min="0" max="30" value="${estadisticas.puntos}" 
                     class="w-full px-2 py-1 border rounded text-center font-bold"
                     data-jugador="${jugador.nombre}" data-stat="puntos"
                     onchange="actualizarEstadistica('${jugador.nombre}', 'puntos', this.value)">
            </div>
            
            <!-- Goles -->
            <div class="flex flex-col">
              <label class="text-xs font-bold text-gray-700 mb-1">‚öΩ Goles</label>
              <input type="number" min="0" max="10" value="${estadisticas.goles}" 
                     class="w-full px-2 py-1 border rounded text-center font-bold"
                     data-jugador="${jugador.nombre}" data-stat="goles"
                     onchange="actualizarEstadistica('${jugador.nombre}', 'goles', this.value)">
            </div>
            
            <!-- Asistencias -->
            <div class="flex flex-col">
              <label class="text-xs font-bold text-gray-700 mb-1">üéØ Asistencias</label>
              <input type="number" min="0" max="10" value="${estadisticas.asistencias}" 
                     class="w-full px-2 py-1 border rounded text-center font-bold"
                     data-jugador="${jugador.nombre}" data-stat="asistencias"
                     onchange="actualizarEstadistica('${jugador.nombre}', 'asistencias', this.value)">
            </div>
            
            <!-- Tarjetas Amarillas -->
            <div class="flex flex-col">
              <label class="text-xs font-bold text-gray-700 mb-1">üü® T. Amarillas</label>
              <input type="number" min="0" max="2" value="${estadisticas.tarjetasAmarillas}" 
                     class="w-full px-2 py-1 border rounded text-center font-bold"
                     data-jugador="${jugador.nombre}" data-stat="tarjetasAmarillas"
                     onchange="actualizarEstadistica('${jugador.nombre}', 'tarjetasAmarillas', this.value)">
            </div>
            
            <!-- Tarjetas Rojas -->
            <div class="flex flex-col">
              <label class="text-xs font-bold text-gray-700 mb-1">üü• T. Rojas</label>
              <input type="number" min="0" max="1" value="${estadisticas.tarjetasRojas}" 
                     class="w-full px-2 py-1 border rounded text-center font-bold"
                     data-jugador="${jugador.nombre}" data-stat="tarjetasRojas"
                     onchange="actualizarEstadistica('${jugador.nombre}', 'tarjetasRojas', this.value)">
            </div>
            
            <!-- Lesi√≥n -->
            <div class="flex flex-col">
              <label class="text-xs font-bold text-gray-700 mb-1">ü©π Duraci√≥n Lesi√≥n (Jornadas)</label>
              <input type="number" min="0" max="10" value="${estadisticas.lesionJornadas || 0}" 
                     class="w-full px-2 py-1 border rounded text-center font-bold"
                     data-jugador="${jugador.nombre}" data-stat="lesionJornadas"
                     onchange="actualizarEstadistica('${jugador.nombre}', 'lesionJornadas', this.value)">
              <small class="text-xs text-gray-500 mt-1">0 = sin lesi√≥n</small>
            </div>
          </div>
        `;
        
        container.appendChild(jugadorDiv);
        
        // Guardar estad√≠sticas del jugador en el mapa (titulares y suplentes)
        alineacionGuardadaData.jugadoresCampo = alineacionGuardadaData.jugadoresCampo.map(([slot, jug]) => {
          if (jug.nombre === jugador.nombre) {
            return [slot, { ...jug, ...estadisticas }];
          }
          return [slot, jug];
        });
        
        // Tambi√©n actualizar suplentes si es necesario
        if (suplentes.has(slotId)) {
          const jugadorSuplente = suplentes.get(slotId);
          suplentes.set(slotId, { ...jugadorSuplente, ...estadisticas });
        }
      });
      
      // Calcular totales iniciales
      calcularTotales();
    }
    
    // Actualizar una estad√≠stica espec√≠fica de un jugador (disponible globalmente)
    window.actualizarEstadistica = function(nombreJugador, estadistica, valor) {
      let valorProcesado;
      
      if (estadistica === 'lesion') {
        valorProcesado = valor; // boolean
      } else {
        valorProcesado = parseInt(valor) || 0;
      }
      
      console.log(`üìä Actualizando ${estadistica} de ${nombreJugador}: ${valorProcesado}`);
      
      // Actualizar en datos guardados (TITULARES)
      if (alineacionGuardadaData) {
        alineacionGuardadaData.jugadoresCampo = alineacionGuardadaData.jugadoresCampo.map(([slotId, jugador]) => {
          if (jugador.nombre === nombreJugador) {
            const jugadorActualizado = { ...jugador };
            jugadorActualizado[estadistica] = valorProcesado;
            return [slotId, jugadorActualizado];
          }
          return [slotId, jugador];
        });
      }
      
      // Actualizar en SUPLENTES tambi√©n
      suplentes.forEach((jugador, slotId) => {
        if (jugador.nombre === nombreJugador) {
          const jugadorActualizado = { ...jugador };
          jugadorActualizado[estadistica] = valorProcesado;
          suplentes.set(slotId, jugadorActualizado);
          console.log(`ü™ë Suplente ${nombreJugador} actualizado:`, jugadorActualizado);
        }
      });
      
      // Actualizar visualizaci√≥n de puntos en el header del jugador
      if (estadistica === 'puntos') {
        const puntoElements = document.querySelectorAll(`[id*="puntos-"]`);
        puntoElements.forEach(element => {
          if (element.id.includes(nombreJugador.replace(/\s+/g, '').toLowerCase()) || 
              element.parentElement.textContent.includes(nombreJugador)) {
            element.textContent = `${valorProcesado} pts`;
          }
        });
      }
      
      // Recalcular totales
      calcularTotales();
    }
    
    // Calcular todos los totales
    function calcularTotales() {
      if (!alineacionGuardadaData) return;
      
      let totalPuntos = 0;
      let totalGoles = 0;
      let totalAsistencias = 0;
      let totalTarjetasAmarillas = 0;
      let totalTarjetasRojas = 0;
      
      console.log('üßÆ Calculando totales...');
      
      // Calcular totales de TITULARES
      alineacionGuardadaData.jugadoresCampo.forEach(([slotId, jugador]) => {
        console.log(`üë§ Titular ${jugador.nombre}: ${jugador.puntos || 0} pts`);
        totalPuntos += (jugador.puntos || 0);
        totalGoles += (jugador.goles || 0);
        totalAsistencias += (jugador.asistencias || 0);
        totalTarjetasAmarillas += (jugador.tarjetasAmarillas || 0);
        totalTarjetasRojas += (jugador.tarjetasRojas || 0);
      });
      
      // Calcular totales de SUPLENTES
      suplentes.forEach((jugador, slotId) => {
        console.log(`ü™ë Suplente ${jugador.nombre}: ${jugador.puntos || 0} pts`);
        totalPuntos += (jugador.puntos || 0);
        totalGoles += (jugador.goles || 0);
        totalAsistencias += (jugador.asistencias || 0);
        totalTarjetasAmarillas += (jugador.tarjetasAmarillas || 0);
        totalTarjetasRojas += (jugador.tarjetasRojas || 0);
      });
      
      console.log(`üìä TOTALES: ${totalPuntos} puntos, ${totalGoles} goles, ${totalAsistencias} asistencias`);
      
      // Actualizar displays
      document.getElementById('puntosTotales').textContent = `${totalPuntos} pts`;
      document.getElementById('golesTotales').textContent = totalGoles;
      document.getElementById('asistenciasTotales').textContent = totalAsistencias;
      document.getElementById('tarjetasTotales').textContent = totalTarjetasAmarillas + totalTarjetasRojas;
      
      // Agregar animaci√≥n de actualizaci√≥n
      ['puntosTotales', 'golesTotales', 'asistenciasTotales', 'tarjetasTotales'].forEach(id => {
        const elemento = document.getElementById(id);
        elemento.classList.add('animate-pulse');
        setTimeout(() => {
          elemento.classList.remove('animate-pulse');
        }, 500);
      });
    }
    
    // Funci√≥n para guardar estad√≠sticas completas
    async function guardarEstadisticasCompletas() {
      if (!alineacionGuardadaData || alineacionGuardadaData.jugadoresCampo.length === 0) {
        alert('‚ùå No hay estad√≠sticas para guardar. Primero guarda una alineaci√≥n.');
        return;
      }
      
      console.log('üíæ Procesando estad√≠sticas para la jornada', jornadaActual);
      
      // Procesar sanciones y lesiones ANTES de guardar las estad√≠sticas
      alineacionGuardadaData.jugadoresCampo.forEach(([slotId, jugador]) => {
        // Procesar tarjetas rojas
        if (jugador.tarjetasRojas && jugador.tarjetasRojas > 0) {
          aplicarSancion(jugador.nombre, 'tarjeta_roja');
          console.log(`üü• ${jugador.nombre} recibe suspensi√≥n por tarjeta roja`);
        }
        
        // Procesar acumulaci√≥n de tarjetas amarillas
        if (jugador.tarjetasAmarillas && jugador.tarjetasAmarillas > 0) {
          if (!estadoJugadores[jugador.nombre]) {
            estadoJugadores[jugador.nombre] = {
              lesionJornadasRestantes: 0,
              suspendidoJornadasRestantes: 0,
              tarjetasAmarillasAcumuladas: 0,
              historialLesiones: [],
              historialSanciones: []
            };
          }
          
          estadoJugadores[jugador.nombre].tarjetasAmarillasAcumuladas += jugador.tarjetasAmarillas;
          
          // Si llega a 5 amarillas, aplicar sanci√≥n
          if (estadoJugadores[jugador.nombre].tarjetasAmarillasAcumuladas >= 5) {
            aplicarSancion(jugador.nombre, 'quinta_amarilla');
            console.log(`üü®üü®üü®üü®üü® ${jugador.nombre} suspendido por 5 amarillas acumuladas`);
          }
        }
        
        // Procesar lesiones
        if (jugador.lesionJornadas && jugador.lesionJornadas > 0) {
          aplicarLesion(jugador.nombre, jugador.lesionJornadas);
          console.log(`ü©π ${jugador.nombre} lesionado por ${jugador.lesionJornadas} jornadas`);
        }
      });
      
      // Crear objeto con todas las estad√≠sticas del partido
      const estadisticasPartido = {
        jornada: jornadaActual,
        fecha: new Date().toISOString(),
        equipo: nombre,
        formacion: alineacionGuardadaData.formacion,
        jugadores: [
          // Titulares
          ...alineacionGuardadaData.jugadoresCampo.map(([slotId, jugador]) => ({
            nombre: jugador.nombre,
            posicion: jugador.posicion,
            puntos: jugador.puntos || 0,
            goles: jugador.goles || 0,
            asistencias: jugador.asistencias || 0,
            tarjetasAmarillas: jugador.tarjetasAmarillas || 0,
            tarjetasRojas: jugador.tarjetasRojas || 0,
            lesionJornadas: jugador.lesionJornadas || 0,
            valorMercado: jugador.valor_mercado,
            ovr: jugador.ovr,
            esTitular: true
          })),
          // Suplentes
          ...Array.from(suplentes.entries()).map(([slotId, jugador]) => ({
            nombre: jugador.nombre,
            posicion: jugador.posicion,
            puntos: jugador.puntos || 0,
            goles: jugador.goles || 0,
            asistencias: jugador.asistencias || 0,
            tarjetasAmarillas: jugador.tarjetasAmarillas || 0,
            tarjetasRojas: jugador.tarjetasRojas || 0,
            lesionJornadas: jugador.lesionJornadas || 0,
            valorMercado: jugador.valor_mercado,
            ovr: jugador.ovr,
            esTitular: false
          }))
        ],
      };
      
      // Calcular totales despu√©s de crear el objeto
      estadisticasPartido.totales = {
        puntos: estadisticasPartido.jugadores.reduce((sum, j) => sum + (j.puntos || 0), 0),
        goles: estadisticasPartido.jugadores.reduce((sum, j) => sum + (j.goles || 0), 0),
        asistencias: estadisticasPartido.jugadores.reduce((sum, j) => sum + (j.asistencias || 0), 0),
        tarjetasAmarillas: estadisticasPartido.jugadores.reduce((sum, j) => sum + (j.tarjetasAmarillas || 0), 0),
        tarjetasRojas: estadisticasPartido.jugadores.reduce((sum, j) => sum + (j.tarjetasRojas || 0), 0),
        jugadoresTotales: estadisticasPartido.jugadores.length,
        titulares: estadisticasPartido.jugadores.filter(j => j.esTitular).length,
        suplentes: estadisticasPartido.jugadores.filter(j => !j.esTitular).length
      };
      
      // Guardar en localStorage para persistencia
      const estadisticasGuardadas = JSON.parse(localStorage.getItem('estadisticasPartidos') || '[]');
      estadisticasGuardadas.push(estadisticasPartido);
      localStorage.setItem('estadisticasPartidos', JSON.stringify(estadisticasGuardadas));
      
      // Actualizar estad√≠sticas de los jugadores individuales
      estadisticasPartido.jugadores.forEach(jugador => {
        actualizarEstadisticasJugador(jugador);
      });
      
      console.log('üíæ Estad√≠sticas guardadas:', estadisticasPartido);
      
      // GUARDAR EN BASE DE DATOS
      try {
        console.log('üì§ Iniciando guardado en base de datos...');
        console.log('üìä Estad√≠sticas del partido completas:', estadisticasPartido);
        console.log('üë• Jugadores a enviar:', estadisticasPartido.jugadores.length);
        
        // Log detallado de cada jugador
        estadisticasPartido.jugadores.forEach((j, index) => {
          console.log(`üèÉ Jugador ${index + 1}:`, {
            nombre: j.nombre,
            puntos: j.puntos,
            goles: j.goles,
            asistencias: j.asistencias,
            tarjetasAmarillas: j.tarjetasAmarillas,
            tarjetasRojas: j.tarjetasRojas,
            esTitular: j.esTitular
          });
        });
        
        const datosParaEnviar = {
          jugadores: estadisticasPartido.jugadores.map(j => ({
            nombre: j.nombre,
            posicion: j.posicion,
            puntos: parseInt(j.puntos) || 0,
            goles: parseInt(j.goles) || 0,
            asistencias: parseInt(j.asistencias) || 0,
            tarjetasAmarillas: parseInt(j.tarjetasAmarillas) || 0,
            tarjetasRojas: parseInt(j.tarjetasRojas) || 0
          }))
        };
        
        console.log('üì¶ Datos procesados para env√≠o:', datosParaEnviar);
        
        const response = await fetch('/api/guardar-estadisticas', {
          method: 'POST',
          headers: { 
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify(datosParaEnviar)
        });
        
        if (!response.ok) {
          throw new Error('Error al guardar en la base de datos');
        }
        
        const resultado = await response.json();
        console.log('‚úÖ Guardado en base de datos:', resultado);
      } catch (error) {
        console.error('‚ùå Error al guardar en base de datos:', error);
        alert('‚ö†Ô∏è Los datos se guardaron localmente pero hubo un error al actualizar la base de datos.');
      }
      
      // ACTUALIZAR ESTAD√çSTICAS ACUMULADAS EN ARCHIVO JSON
      try {
        console.log('üìÑ Actualizando estad√≠sticas acumuladas en archivo JSON...');
        
        // Obtener estad√≠sticas acumuladas de localStorage
        const estadisticasJugadores = JSON.parse(localStorage.getItem('estadisticasJugadores') || '{}');
        
        // Filtrar solo jugadores que participaron en esta jornada para actualizar el archivo
        const jugadoresParaActualizar = {};
        estadisticasPartido.jugadores.forEach(jugador => {
          if (estadisticasJugadores[jugador.nombre]) {
            jugadoresParaActualizar[jugador.nombre] = estadisticasJugadores[jugador.nombre];
            console.log(`üìà Preparando actualizaci√≥n para ${jugador.nombre}:`, {
              puntosTotal: estadisticasJugadores[jugador.nombre].puntosTotal,
              golesTotal: estadisticasJugadores[jugador.nombre].golesTotal,
              partidosJugados: estadisticasJugadores[jugador.nombre].partidosJugados
            });
          }
        });
        
        if (Object.keys(jugadoresParaActualizar).length > 0) {
          const responseActualizacion = await fetch('/api/actualizar-jugadores', {
            method: 'POST',
            headers: { 
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            },
            body: JSON.stringify({
              jugadoresActualizados: jugadoresParaActualizar
            })
          });
          
          if (!responseActualizacion.ok) {
            throw new Error('Error al actualizar estad√≠sticas acumuladas');
          }
          
          const resultadoActualizacion = await responseActualizacion.json();
          console.log('‚úÖ Estad√≠sticas acumuladas actualizadas:', resultadoActualizacion);
        } else {
          console.log('üîÑ No hay jugadores para actualizar en el archivo JSON');
        }
      } catch (error) {
        console.error('‚ùå Error al actualizar estad√≠sticas acumuladas:', error);
        // No mostramos alert aqu√≠ porque las estad√≠sticas locales ya se guardaron correctamente
      }
      
      // Feedback visual
      const boton = document.getElementById('guardarEstadisticas');
      const textoOriginal = boton.textContent;
      boton.textContent = '‚úÖ ¬°Estad√≠sticas Guardadas!';
      boton.className = 'bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-8 rounded-lg shadow-lg transition-colors';
      
      setTimeout(() => {
        boton.textContent = textoOriginal;
        boton.className = 'bg-indigo-500 hover:bg-indigo-600 text-white font-bold py-3 px-8 rounded-lg shadow-lg transition-colors';
      }, 3000);
      
      // Marcar jornada como completada y MANTENER ALINEACI√ìN
      if (!datosJornadas[jornadaActual]) {
        datosJornadas[jornadaActual] = {};
      }
      datosJornadas[jornadaActual].estadisticasGuardadas = true;
      datosJornadas[jornadaActual].estadisticasPartido = estadisticasPartido;
      
      // MANTENER LA ALINEACI√ìN ACTUAL - NO LIMPIAR EL CAMPO
      datosJornadas[jornadaActual].formacion = alineacionActual;
      datosJornadas[jornadaActual].jugadoresCampo = Array.from(jugadoresEnCampo.entries());
      datosJornadas[jornadaActual].suplentes = Array.from(suplentes.entries());
      datosJornadas[jornadaActual].fechaModificacion = new Date().toISOString();
      
      localStorage.setItem(`jornadas_${nombre}`, JSON.stringify(datosJornadas));
      
      // Actualizar estado visual
      actualizarEstadoJornadaVisual();
      
      console.log(`üíæ Jornada ${jornadaActual} guardada completamente con alineaci√≥n preservada`);
      
      // Mostrar resumen con informaci√≥n de lesiones y sanciones aplicadas
      let resumenSanciones = '';
      let jugadoresSancionados = [];
      let jugadoresLesionados = [];
      
      estadisticasPartido.jugadores.forEach(jugador => {
        if (jugador.tarjetasRojas > 0) {
          jugadoresSancionados.push(`${jugador.nombre} (üü• 1J)`);
        }
        if (jugador.lesionJornadas > 0) {
          jugadoresLesionados.push(`${jugador.nombre} (ü©π ${jugador.lesionJornadas}J)`);
        }
      });
      
      if (jugadoresSancionados.length > 0 || jugadoresLesionados.length > 0) {
        resumenSanciones = '\n\nüìã JUGADORES AFECTADOS:';
        if (jugadoresSancionados.length > 0) {
          resumenSanciones += `\nüö´ Suspendidos: ${jugadoresSancionados.join(', ')}`;
        }
        if (jugadoresLesionados.length > 0) {
          resumenSanciones += `\nüè• Lesionados: ${jugadoresLesionados.join(', ')}`;
        }
        resumenSanciones += '\n\n‚ö†Ô∏è Estos jugadores NO estar√°n disponibles en las pr√≥ximas jornadas.';
      }
      
      alert(`‚úÖ Jornada ${jornadaActual} completada exitosamente\n\nüìÖ Fecha: ${new Date().toLocaleDateString('es-ES')}\nüéÜ Equipo: ${nombre}\nüìä Formaci√≥n: ${estadisticasPartido.formacion}\nüèÜ Puntos totales: ${estadisticasPartido.totales.puntos}\n‚öΩ Goles totales: ${estadisticasPartido.totales.goles}\nüéØ Asistencias totales: ${estadisticasPartido.totales.asistencias}\nüü® Tarjetas amarillas: ${estadisticasPartido.totales.tarjetasAmarillas}\nüü• Tarjetas rojas: ${estadisticasPartido.totales.tarjetasRojas}${resumenSanciones}`);
    }
    
    // Actualizar estad√≠sticas hist√≥ricas de un jugador
    function actualizarEstadisticasJugador(datosPartido) {
      const estadisticasJugadores = JSON.parse(localStorage.getItem('estadisticasJugadores') || '{}');
      
      if (!estadisticasJugadores[datosPartido.nombre]) {
        estadisticasJugadores[datosPartido.nombre] = {
          nombre: datosPartido.nombre,
          posicion: datosPartido.posicion,
          partidosJugados: 0,
          puntosTotal: 0,
          golesTotal: 0,
          asistenciasTotal: 0,
          tarjetasAmarillasTotal: 0,
          tarjetasRojasTotal: 0,
          lesionesTotal: 0,
          valorMercadoActual: datosPartido.valorMercado,
          ovr: datosPartido.ovr,
          historial: []
        };
      }
      
      const jugador = estadisticasJugadores[datosPartido.nombre];
      
      // Actualizar totales
      jugador.partidosJugados += 1;
      jugador.puntosTotal += datosPartido.puntos;
      jugador.golesTotal += datosPartido.goles;
      jugador.asistenciasTotal += datosPartido.asistencias;
      jugador.tarjetasAmarillasTotal += datosPartido.tarjetasAmarillas;
      jugador.tarjetasRojasTotal += datosPartido.tarjetasRojas;
      if (datosPartido.lesion) jugador.lesionesTotal += 1;
      
      // Actualizar datos actuales
      jugador.valorMercadoActual = datosPartido.valorMercado;
      
      // Agregar al historial
      jugador.historial.push({
        fecha: new Date().toISOString(),
        puntos: datosPartido.puntos,
        goles: datosPartido.goles,
        asistencias: datosPartido.asistencias,
        tarjetasAmarillas: datosPartido.tarjetasAmarillas,
        tarjetasRojas: datosPartido.tarjetasRojas,
        lesion: datosPartido.lesion,
        valorMercado: datosPartido.valorMercado
      });
      
      // Guardar estad√≠sticas actualizadas
      localStorage.setItem('estadisticasJugadores', JSON.stringify(estadisticasJugadores));
    }
    
    // Actualizar secci√≥n de jugadores no disponibles
    function actualizarSeccionJugadoresNoDisponibles() {
      const container = document.getElementById('listaNoDisponibles');
      const seccion = document.getElementById('jugadoresNoDisponibles');
      container.innerHTML = '';
      
      const jugadoresNoDisponibles = jugadoresEquipo.filter(jugador => 
        !jugadorDisponible(jugador.nombre)
      );
      
      if (jugadoresNoDisponibles.length === 0) {
        // Ocultar secci√≥n si no hay jugadores no disponibles
        seccion.style.display = 'none';
        return;
      }
      
      // Mostrar secci√≥n
      seccion.style.display = 'block';
      
      jugadoresNoDisponibles.forEach(jugador => {
        const estado = estadoJugadores[jugador.nombre];
        const div = document.createElement('div');
        
        div.className = 'bg-red-50 border border-red-200 rounded-lg p-3 opacity-75';
        
        // Determinar tipo de indisponibilidad
        let tipoIndisponibilidad = '';
        let iconoEstado = '';
        let colorFondo = 'bg-red-50 border-red-200';
        
        if (estado.lesionJornadasRestantes > 0) {
          tipoIndisponibilidad = `Lesionado (${estado.lesionJornadasRestantes} jornadas)`;
          iconoEstado = 'ü©π';
          colorFondo = 'bg-red-50 border-red-200';
        } else if (estado.suspendidoJornadasRestantes > 0) {
          tipoIndisponibilidad = `Suspendido (${estado.suspendidoJornadasRestantes} jornadas)`;
          iconoEstado = 'üü•';
          colorFondo = 'bg-orange-50 border-orange-200';
        }
        
        div.className = `${colorFondo} rounded-lg p-3 opacity-75`;
        
        div.innerHTML = `
          <div class="flex items-center space-x-3">
            <img src="${jugador.foto}" alt="${jugador.nombre}" 
                 class="w-8 h-8 rounded-full object-cover border border-gray-300 grayscale"
                 onerror="this.src='https://via.placeholder.com/32/cccccc/666666?text=?'">
            <div class="flex-1 min-w-0">
              <div class="text-sm font-bold text-gray-700 truncate">${jugador.nombre}</div>
              <div class="text-xs text-gray-600">${jugador.posicion} ‚Ä¢ OVR: ${jugador.ovr}</div>
            </div>
            <div class="text-right">
              <div class="text-xs font-bold text-red-600">${iconoEstado} ${tipoIndisponibilidad}</div>
              <div class="text-xs text-gray-500">${jugador.puntos || 0} pts</div>
            </div>
          </div>
        `;
        
        container.appendChild(div);
      });
      
      console.log(`üö´ ${jugadoresNoDisponibles.length} jugadores no disponibles mostrados`);
    }
  </script>

  <style>
    .jugador-card:hover {
      box-shadow: 0 4px 20px rgba(0,0,0,0.1);
    }
  </style>
</BaseLayout>
